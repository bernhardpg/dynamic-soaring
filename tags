!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	examples/trajopt_example.py	/^A = np.eye(2) + dt*np.mat('0 1; 0 0')$/;"	v
Axes3D	plot/plot.py	/^from mpl_toolkits.mplot3d import Axes3D$/;"	i
B	examples/trajopt_example.py	/^B = dt*np.mat('0; 1')$/;"	v
CopyStateOut	dynamics/slotine_dynamics.py	/^        def CopyStateOut(self, context, output):$/;"	m	class:SlotineGlider_.Impl
CopyStateOut	dynamics/zhukovskii_glider.py	/^        def CopyStateOut(self, context, output):$/;"	m	class:DrakeSysWrapper_.Impl
DoCalcTimeDerivatives	dynamics/slotine_dynamics.py	/^        def DoCalcTimeDerivatives(self, context, derivatives):$/;"	m	class:SlotineGlider_.Impl
DoCalcTimeDerivatives	dynamics/zhukovskii_glider.py	/^        def DoCalcTimeDerivatives(self, context, derivatives):$/;"	m	class:DrakeSysWrapper_.Impl
DrakeSysWrapper	dynamics/zhukovskii_glider.py	/^DrakeSysWrapper = DrakeSysWrapper_[None]$/;"	v
DrakeSysWrapper_	dynamics/zhukovskii_glider.py	/^def DrakeSysWrapper_(T):$/;"	f
Expression	dynamics/glider.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
Expression	ilqr/ilqr.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
FourierCollocationProblem	trajopt/fourier_collocation.py	/^class FourierCollocationProblem:$/;"	c
FuncAnimation	plot/plot.py	/^from matplotlib.animation import FuncAnimation$/;"	i
Impl	dynamics/slotine_dynamics.py	/^    class Impl(LeafSystem_[T]):$/;"	c	function:SlotineGlider_
Impl	dynamics/zhukovskii_glider.py	/^    class Impl(LeafSystem_[T]):$/;"	c	function:DrakeSysWrapper_
MathematicalProgram	dynamics/glider.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
MathematicalProgram	examples/trajopt_example.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable$/;"	i
MathematicalProgram	ilqr/ilqr.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
N	examples/trajopt_example.py	/^N = 284  # Note: I had to do a manual "line search" to find this.$/;"	v
N	trajopt/direct_collocation.py	/^    N = 21  # Collocation points$/;"	v
N_plot	trajopt/direct_collocation.py	/^        N_plot = 200$/;"	v
Q	trajopt/direct_collocation.py	/^    Q = 2$/;"	v
Q_terms	ilqr/ilqr.py	/^def Q_terms(l_x, l_u, l_xx, l_ux, l_uu, f_x, f_u, V_x, V_xx):$/;"	f
R	trajopt/direct_collocation.py	/^    R = 5$/;"	v
SlotineGlider	dynamics/slotine_dynamics.py	/^SlotineGlider = SlotineGlider_[None]$/;"	v
SlotineGlider	trajopt/nonlin_trajopt.py	/^from dynamics.slotine_dynamics import continuous_dynamics, SlotineGlider$/;"	i
SlotineGlider_	dynamics/slotine_dynamics.py	/^def SlotineGlider_(T):$/;"	f
Solve	dynamics/glider.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
Solve	examples/trajopt_example.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable$/;"	i
Solve	ilqr/ilqr.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
V_terms	ilqr/ilqr.py	/^def V_terms(Q_x, Q_u, Q_xx, Q_ux, Q_uu, K, k):$/;"	f
Variable	dynamics/glider.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
Variable	examples/trajopt_example.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable$/;"	i
Variable	ilqr/ilqr.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
ZhukovskiiGlider	dynamics/zhukovskii_glider.py	/^class ZhukovskiiGlider:$/;"	c
ZhukovskiiGlider	trajopt/nonlin_trajopt.py	/^from dynamics.zhukovskii_glider import ZhukovskiiGlider$/;"	i
__init__	dynamics/zhukovskii_glider.py	/^    def __init__(self, b=3.306, A=0.65, m=8.5, c_Dp=0.033, rho=1.255, g=9.81):$/;"	m	class:ZhukovskiiGlider
__init__	ilqr/ilqr.py	/^    def __init__(self, discrete_dynamics, cost_stage, cost_final, n_x, n_u):$/;"	m	class:derivatives
__init__	trajopt/fourier_collocation.py	/^    def __init__(self, system_dynamics, constraints):$/;"	m	class:FourierCollocationProblem
_construct	dynamics/slotine_dynamics.py	/^        def _construct(self, converter=None):$/;"	m	class:SlotineGlider_.Impl
_construct	dynamics/zhukovskii_glider.py	/^        def _construct(self, num_inputs, continuous_dynamics, converter=None):$/;"	m	class:DrakeSysWrapper_.Impl
_construct_copy	dynamics/slotine_dynamics.py	/^        def _construct_copy(self, other, converter=None):$/;"	m	class:SlotineGlider_.Impl
_construct_copy	dynamics/zhukovskii_glider.py	/^        def _construct_copy(self, other, converter=None):$/;"	m	class:DrakeSysWrapper_.Impl
animation	plot/plot.py	/^import matplotlib.animation as animation$/;"	i
avg_vel_guess	trajopt/direct_collocation.py	/^    avg_vel_guess = V_l * 0.5  # TODO tune this$/;"	v
backward_pass	ilqr/ilqr.py	/^def backward_pass(x_trj, u_trj, regu, derivs):$/;"	f
calc_lift_coeff	dynamics/zhukovskii_glider.py	/^    def calc_lift_coeff(self, x, c, A):$/;"	m	class:ZhukovskiiGlider
calc_opt_glide_angle	dynamics/zhukovskii_glider.py	/^    def calc_opt_glide_angle(self, AR, c_Dp):$/;"	m	class:ZhukovskiiGlider
calc_opt_glide_ratio	dynamics/zhukovskii_glider.py	/^    def calc_opt_glide_ratio(self, AR, c_Dp):$/;"	m	class:ZhukovskiiGlider
calc_opt_glide_speed	dynamics/zhukovskii_glider.py	/^    def calc_opt_glide_speed(self, AR, c_Dp, m, A, b, rho, g):$/;"	m	class:ZhukovskiiGlider
calc_opt_level_glide_speed	dynamics/zhukovskii_glider.py	/^    def calc_opt_level_glide_speed(self, AR, c_Dp, m, A, b, rho, g):$/;"	m	class:ZhukovskiiGlider
context	trajopt/direct_collocation.py	/^    context = plant.CreateDefaultContext()$/;"	v
continuous_dynamics	dynamics/glider.py	/^def continuous_dynamics(x, u):$/;"	f
continuous_dynamics	dynamics/slotine_dynamics.py	/^def continuous_dynamics(state, u):$/;"	f
continuous_dynamics	ilqr/ilqr.py	/^from dynamics.slotine_dynamics import continuous_dynamics$/;"	i
continuous_dynamics	test/test_dynamics.m	/^function x_dot = continuous_dynamics(x, u)$/;"	f
continuous_dynamics	test/test_dynamics.py	/^    from dynamics.slotine_dynamics import continuous_dynamics$/;"	i
continuous_dynamics	trajopt/fourier_collocation.py	/^    def continuous_dynamics(self, pos, vel, vel_dot):$/;"	m	class:FourierCollocationProblem
continuous_dynamics	trajopt/nonlin_trajopt.py	/^from dynamics.slotine_dynamics import continuous_dynamics, SlotineGlider$/;"	i
continuous_dynamics_diff_flat_dimless	dynamics/zhukovskii_glider.py	/^    def continuous_dynamics_diff_flat_dimless(self, x, u):$/;"	m	class:ZhukovskiiGlider
continuous_dynamics_dimless	dynamics/zhukovskii_glider.py	/^    def continuous_dynamics_dimless(self, x, u):$/;"	m	class:ZhukovskiiGlider
cost_final	ilqr/ilqr.py	/^def cost_final(x):$/;"	f
cost_stage	ilqr/ilqr.py	/^def cost_stage(x, u):$/;"	f
cost_trj	ilqr/ilqr.py	/^def cost_trj(x_trj, u_trj):$/;"	f
create_drake_plant	dynamics/zhukovskii_glider.py	/^    def create_drake_plant(self, diff_flat):$/;"	m	class:ZhukovskiiGlider
ddt_exp_wind_model	dynamics/wind_models.py	/^def ddt_exp_wind_model(z, z_dot):$/;"	f
ddt_log_wind_model	dynamics/wind_models.py	/^def ddt_log_wind_model(z, z_dot):$/;"	f
ddt_wind_model	dynamics/slotine_dynamics.py	/^from dynamics.wind_models import wind_model, ddt_wind_model$/;"	i
ddt_wind_model	dynamics/wind_models.py	/^ddt_wind_model = ddt_log_wind_model$/;"	v
ddt_wind_model	plot/plot.py	/^from dynamics.wind_models import wind_model, ddt_wind_model, get_wind_field$/;"	i
derivatives	ilqr/ilqr.py	/^class derivatives:$/;"	c
dir_vector	trajopt/direct_collocation.py	/^    dir_vector = np.array([np.sin(travel_angle), np.cos(travel_angle)])$/;"	v
dircol	trajopt/direct_collocation.py	/^    dircol = DirectCollocation($/;"	v
direct_collocation	trajopt/direct_collocation.py	/^def direct_collocation($/;"	f
direct_collocation_slotine_glider	trajopt/nonlin_trajopt.py	/^def direct_collocation_slotine_glider():$/;"	f
direct_transcription	trajopt/nonlin_trajopt.py	/^def direct_transcription():$/;"	f
discrete_dynamics	ilqr/ilqr.py	/^def discrete_dynamics(x, u):$/;"	f
do_collocation_w_fourier	main.py	/^def do_collocation_w_fourier():$/;"	f
do_sweep_dircol	main.py	/^def do_sweep_dircol():$/;"	f
dt	examples/trajopt_example.py	/^dt = 0.01;$/;"	v
enable_brake_param	trajopt/direct_collocation.py	/^    enable_brake_param = u.shape[0] > 3$/;"	v
end_time_guess	trajopt/direct_collocation.py	/^    end_time_guess = N * max_dt$/;"	v
eq	dynamics/glider.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
eq	examples/trajopt_example.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable$/;"	i
eq	ilqr/ilqr.py	/^from pydrake.all import eq, MathematicalProgram, Solve, Variable, Expression$/;"	i
evaluate_pos_traj	trajopt/fourier_collocation.py	/^    def evaluate_pos_traj(self, coeffs, phase_delays, t_f, avg_vel, t):$/;"	m	class:FourierCollocationProblem
evaluate_vel_traj	trajopt/fourier_collocation.py	/^    def evaluate_vel_traj(self, coeffs, phase_delays, t_f, avg_vel, t):$/;"	m	class:FourierCollocationProblem
exp_wind_model	dynamics/wind_models.py	/^def exp_wind_model(z):  # Taken from Deittert et al.$/;"	f
expected_cost_reduction	ilqr/ilqr.py	/^def expected_cost_reduction(Q_u, Q_uu, k):$/;"	f
final	ilqr/ilqr.py	/^    def final(self, x):$/;"	m	class:derivatives
formulate_time	trajopt/direct_collocation.py	/^    formulate_time = time.time()$/;"	v
forward_pass	ilqr/ilqr.py	/^def forward_pass(x_trj, u_trj, k_trj, K_trj):$/;"	f
gains	ilqr/ilqr.py	/^def gains(Q_uu, Q_u, Q_ux):$/;"	f
get_angle_of_attack	dynamics/zhukovskii_glider.py	/^    def get_angle_of_attack(self, x, u):$/;"	m	class:ZhukovskiiGlider
get_char_values	dynamics/zhukovskii_glider.py	/^    def get_char_values(self):$/;"	m	class:ZhukovskiiGlider
get_constraints	dynamics/zhukovskii_glider.py	/^    def get_constraints(self):$/;"	m	class:ZhukovskiiGlider
get_constraints_dimless	dynamics/zhukovskii_glider.py	/^    def get_constraints_dimless(self):$/;"	m	class:ZhukovskiiGlider
get_dimless_wind_vector	dynamics/wind_models.py	/^def get_dimless_wind_vector(z, L, V_l):$/;"	f
get_pos_fourier	trajopt/fourier_collocation.py	/^    def get_pos_fourier(self, collocation_time):$/;"	m	class:FourierCollocationProblem
get_solution	trajopt/fourier_collocation.py	/^    def get_solution(self):$/;"	m	class:FourierCollocationProblem
get_vel_dot_fourier	trajopt/fourier_collocation.py	/^    def get_vel_dot_fourier(self, collocation_time):$/;"	m	class:FourierCollocationProblem
get_vel_fourier	trajopt/fourier_collocation.py	/^    def get_vel_fourier(self, collocation_time):$/;"	m	class:FourierCollocationProblem
get_vel_rel	dynamics/zhukovskii_glider.py	/^    def get_vel_rel(self, x):$/;"	m	class:ZhukovskiiGlider
get_wind	dynamics/glider.py	/^def get_wind(height):$/;"	f
get_wind_field	dynamics/glider.py	/^def get_wind_field(x, y, z):$/;"	f
get_wind_field	dynamics/wind_models.py	/^def get_wind_field(x, y, z):$/;"	f
get_wind_field	plot/plot.py	/^from dynamics.wind_models import wind_model, ddt_wind_model, get_wind_field$/;"	i
get_wind_field	test/test_dynamics.py	/^    from dynamics.slotine_dynamics import get_wind_field$/;"	i
get_wind_field	test/test_ilqr.py	/^from dynamics.slotine_dynamics import get_wind_field$/;"	i
get_wind_vector	dynamics/wind_models.py	/^def get_wind_vector(z):$/;"	f
init	plot/plot.py	/^    def init():$/;"	f	function:save_trajectory_gif
initial_x_trajectory	trajopt/direct_collocation.py	/^        initial_x_trajectory = PiecewisePolynomial.FirstOrderHold($/;"	v
log_wind_model	dynamics/wind_models.py	/^def log_wind_model(z):  # Taken from slotine$/;"	f
main	main.py	/^def main():$/;"	f
matplotlib	examples/trajopt_example.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	plot/plot.py	/^import matplotlib.animation as animation$/;"	i
matplotlib	plot/plot.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	test/test_ilqr.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	trajopt/nonlin_trajopt.py	/^import matplotlib.pyplot as plt$/;"	i
max_dt	trajopt/direct_collocation.py	/^    max_dt = 0.5$/;"	v
maximum_timestep	trajopt/direct_collocation.py	/^        maximum_timestep=max_dt,$/;"	v
min_dt	trajopt/direct_collocation.py	/^    min_dt = 0.05$/;"	v
minimum_timestep	trajopt/direct_collocation.py	/^        minimum_timestep=min_dt,$/;"	v
np	dynamics/glider.py	/^import numpy as np$/;"	i
np	dynamics/slotine_dynamics.py	/^import numpy as np$/;"	i
np	dynamics/wind_models.py	/^import numpy as np$/;"	i
np	dynamics/zhukovskii_glider.py	/^import numpy as np$/;"	i
np	examples/trajopt_example.py	/^import numpy as np$/;"	i
np	ilqr/ilqr.py	/^import numpy as np$/;"	i
np	plot/plot.py	/^import numpy as np$/;"	i
np	test/test_dynamics.py	/^import numpy as np$/;"	i
np	test/test_ilqr.py	/^import numpy as np$/;"	i
np	trajopt/direct_collocation.py	/^import numpy as np$/;"	i
np	trajopt/fourier_collocation.py	/^import numpy as np$/;"	i
np	trajopt/nonlin_trajopt.py	/^import numpy as np$/;"	i
num_time_samples	trajopt/direct_collocation.py	/^        num_time_samples=N,$/;"	v
pdb	test/test_ilqr.py	/^import pdb$/;"	i
pdb	trajopt/nonlin_trajopt.py	/^import pdb$/;"	i
plant	trajopt/direct_collocation.py	/^    plant = zhukovskii_glider.create_drake_plant(diff_flat=False)$/;"	v
plot_glider_input	plot/plot.py	/^def plot_glider_input(t, u_trj, c_l_trj):$/;"	f
plot_glider_pos	plot/plot.py	/^def plot_glider_pos(x_trj, travel_angle):$/;"	f
plot_trajectories	plot/plot.py	/^def plot_trajectories(trajectories):$/;"	f
plot_trj_3_wind	test/test_dynamics.py	/^from plot.plot import plot_trj_3_wind$/;"	i
plot_trj_3_wind	test/test_ilqr.py	/^from plot.plot import plot_trj_3_wind$/;"	i
plot_u_trj	plot/plot.py	/^def plot_u_trj(t, u_trj, ax):$/;"	f
plot_x_trj	plot/plot.py	/^def plot_x_trj(x_trj, travel_angle, ax):$/;"	f
plt	examples/trajopt_example.py	/^import matplotlib.pyplot as plt$/;"	i
plt	plot/plot.py	/^import matplotlib.pyplot as plt$/;"	i
plt	test/test_ilqr.py	/^import matplotlib.pyplot as plt$/;"	i
plt	trajopt/nonlin_trajopt.py	/^import matplotlib.pyplot as plt$/;"	i
polar_plot_avg_velocities	plot/plot.py	/^def polar_plot_avg_velocities(avg_velocities):$/;"	f
prog	examples/trajopt_example.py	/^prog = MathematicalProgram()$/;"	v
pydrake	dynamics/slotine_dynamics.py	/^import pydrake.symbolic as sym$/;"	i
pydrake	ilqr/ilqr.py	/^import pydrake.symbolic as sym$/;"	i
pydrake	trajopt/fourier_collocation.py	/^import pydrake.symbolic as sym$/;"	i
result	examples/trajopt_example.py	/^result = Solve(prog)$/;"	v
result	trajopt/direct_collocation.py	/^    result = Solve(dircol)$/;"	v
rollout	ilqr/ilqr.py	/^def rollout(x0, u_trj):$/;"	f
rollout_slotine_dynamics	test/test_dynamics.py	/^def rollout_slotine_dynamics():$/;"	f
run_ilqr	ilqr/ilqr.py	/^def run_ilqr(x0, n_x, n_u, N, max_iter=50, regu_init=100):$/;"	f
run_ilqr	test/test_ilqr.py	/^from ilqr.ilqr import run_ilqr$/;"	i
save_trajectory_gif	plot/plot.py	/^def save_trajectory_gif(zhukovskii_glider, traj, travel_angle):$/;"	f
set_params	dynamics/zhukovskii_glider.py	/^    def set_params(self, b, A, m, c_Dp, rho, g):$/;"	m	class:ZhukovskiiGlider
simulate_drake_system	trajopt/nonlin_trajopt.py	/^def simulate_drake_system(plant):$/;"	f
single_dircol_w_real_values	main.py	/^def single_dircol_w_real_values():$/;"	f
skew_matrix	dynamics/zhukovskii_glider.py	/^def skew_matrix(v):$/;"	f
solution_avg_vel	trajopt/direct_collocation.py	/^        solution_avg_vel = solution_distance \/ solution_period$/;"	v
solution_cost	trajopt/direct_collocation.py	/^        solution_cost = result.get_optimal_cost()$/;"	v
solution_distance	trajopt/direct_collocation.py	/^        solution_distance = dir_vector.T.dot(x_knots[-1, 0:2])$/;"	v
solution_period	trajopt/direct_collocation.py	/^        solution_period = x_traj_dimless.end_time() * T$/;"	v
solution_time	trajopt/direct_collocation.py	/^        solution_time = time.time()$/;"	v
sqrt	dynamics/zhukovskii_glider.py	/^from math import sqrt$/;"	i
stage	ilqr/ilqr.py	/^    def stage(self, x, u):$/;"	m	class:derivatives
start_time	trajopt/direct_collocation.py	/^    start_time = time.time()$/;"	v
sym	dynamics/slotine_dynamics.py	/^import pydrake.symbolic as sym$/;"	i
sym	ilqr/ilqr.py	/^import pydrake.symbolic as sym$/;"	i
sym	trajopt/fourier_collocation.py	/^import pydrake.symbolic as sym$/;"	i
test_ilqr	test/test_ilqr.py	/^def test_ilqr():$/;"	f
time	trajopt/direct_collocation.py	/^import time$/;"	i
time	trajopt/fourier_collocation.py	/^import time$/;"	i
times	trajopt/direct_collocation.py	/^        times = np.linspace($/;"	v
times	trajopt/direct_collocation.py	/^        times = times_dimless * T$/;"	v
times_dimless	trajopt/direct_collocation.py	/^        times_dimless = np.linspace($/;"	v
total_dist_travelled_guess	trajopt/direct_collocation.py	/^    total_dist_travelled_guess = avg_vel_guess * end_time_guess$/;"	v
traj_plt	trajopt/direct_collocation.py	/^        traj_plt = plot_trj_3_wind(x0_knots[:, 0:3], dir_vector)$/;"	v
u	examples/trajopt_example.py	/^u = np.empty((1, N-1), dtype=Variable)$/;"	v
u	trajopt/direct_collocation.py	/^    u = dircol.input()$/;"	v
u_knots	trajopt/direct_collocation.py	/^        u_knots = u_knots_dimless * C$/;"	v
u_knots_dimless	trajopt/direct_collocation.py	/^        u_knots_dimless = np.hstack([u_traj_dimless.value(t) for t in times_dimless]).T$/;"	v
u_traj_dimless	trajopt/direct_collocation.py	/^        u_traj_dimless = dircol.ReconstructInputTrajectory(result)$/;"	v
update	plot/plot.py	/^    def update(frame):$/;"	f	function:save_trajectory_gif
wind_model	dynamics/slotine_dynamics.py	/^from dynamics.wind_models import wind_model, ddt_wind_model$/;"	i
wind_model	dynamics/wind_models.py	/^wind_model = log_wind_model$/;"	v
wind_model	plot/plot.py	/^from dynamics.wind_models import wind_model, ddt_wind_model, get_wind_field$/;"	i
x	examples/trajopt_example.py	/^x = np.empty((2, N), dtype=Variable)$/;"	v
x	trajopt/direct_collocation.py	/^    x = dircol.state()$/;"	v
x0	examples/trajopt_example.py	/^x0 = [-2, 0]$/;"	v
x0_guess	trajopt/direct_collocation.py	/^        x0_guess = np.array($/;"	v
x0_knots	trajopt/direct_collocation.py	/^        x0_knots = np.hstack([initial_x_trajectory.value(t) for t in times]).T$/;"	v
x0_pos	trajopt/direct_collocation.py	/^    x0_pos = np.array([0, 0, h0])$/;"	v
x_knots	trajopt/direct_collocation.py	/^        x_knots = x_knots_dimless * L$/;"	v
x_knots_dimless	trajopt/direct_collocation.py	/^        x_knots_dimless = np.hstack([x_traj_dimless.value(t) for t in times_dimless]).T$/;"	v
x_sol	examples/trajopt_example.py	/^x_sol = result.GetSolution(x)$/;"	v
x_traj_dimless	trajopt/direct_collocation.py	/^        x_traj_dimless = dircol.ReconstructStateTrajectory(result)$/;"	v
xf	examples/trajopt_example.py	/^xf = [0, 0]$/;"	v
xf_guess	trajopt/direct_collocation.py	/^        xf_guess = np.array($/;"	v
xy_pos_final	trajopt/direct_collocation.py	/^    xy_pos_final = dircol.final_state()[0:2]$/;"	v
